---
title: "Sensor Fusion and Predictive Maintenance for Autonomous Aerial Vehicles using ML Pipelines and Stochastic Nonlinear Optimization"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

### Paste in a template
simulate a UAV (drone) environment with multiple sensors (e.g., accelerometer, gyroscope, temperature), fuse this data, predict component wear/failure, and optimize maintenance schedules.


Simulate Sensor Data
```{python}
import numpy as np
import pandas as pd

# Sets the random seed so the results are reproducible every time run the code
np.random.seed(0)

time = np.arange(0, 1000)

data = pd.DataFrame({
    'time': time,

    #sine wave signal plus random noise (simulated sensor reading)
    'accelerometer': np.sin(time * 0.01) + np.random.normal(0, 0.1, len(time)),

    # cosine wave signal plus noise (another sensor)
    'gyroscope': np.cos(time * 0.01) + np.random.normal(0, 0.1, len(time)),

    # slowly increasing linear trend plus noise (simulated thermal sensor)
    'temperature': 30 + 0.01 * time + np.random.normal(0, 0.5, len(time)),
})

data.head()
```


Create a Health Score Label

```{python}

# Create a health score that degrades over time
data['health_score'] = 1 - (time / max(time)) + np.random.normal(0, 0.05, len(time))
data['health_score'] = data['health_score'].clip(0, 1)

```




 Build a Scikit-Learn ML Pipeline


```{python}
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

X = data[['accelerometer', 'gyroscope', 'temperature']]
y = data['health_score']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('model', RandomForestRegressor(n_estimators=100)),
])
pipeline.fit(X_train, y_train)

```




Evaluate the Model


```{python}
from sklearn.metrics import mean_squared_error

preds = pipeline.predict(X_test)
mse = mean_squared_error(y_test, preds)
print(f"Test MSE: {mse:.4f}")

```



Stochastic Nonlinear Optimization for Maintenance Scheduling

Goal: Minimize maintenance cost while keeping the average health score above a threshold.

```{python}
from scipy.optimize import differential_evolution

# Mock cost function
def maintenance_cost(schedule):
    intervals = schedule[0]
    if intervals <= 0: return 1e6
    simulated_health = 1 - np.linspace(0, 1, 1000)
    maintenance_penalty = np.sum(simulated_health[::int(intervals)] < 0.5)
    return intervals + 100 * maintenance_penalty

result = differential_evolution(maintenance_cost, bounds=[(1, 100)])
print(f"Optimal maintenance interval: {result.x[0]:.2f}")

```


Visualize Everything
```{python}
import matplotlib.pyplot as plt

plt.figure(figsize=(12,4))
plt.plot(data['time'], data['health_score'], label='Health Score')
plt.xlabel("Time"); plt.ylabel("Score")
plt.title("Simulated UAV Component Health")
plt.legend()
plt.grid()
plt.show()

```